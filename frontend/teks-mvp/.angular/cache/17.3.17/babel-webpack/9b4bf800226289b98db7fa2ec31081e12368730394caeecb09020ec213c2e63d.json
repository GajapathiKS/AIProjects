{"ast":null,"code":"import { inject } from '@angular/core';\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { ProgramService } from '../services/program.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NgIf } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction AssignmentNewPageComponent_p_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMsg);\n  }\n}\nexport let AssignmentNewPageComponent = /*#__PURE__*/(() => {\n  class AssignmentNewPageComponent {\n    constructor() {\n      this.fb = inject(FormBuilder);\n      this.api = inject(ProgramService);\n      this.router = inject(Router);\n      this.route = inject(ActivatedRoute);\n      // Prefer reading from parent route to avoid missing id when nested\n      this.studentId = this.route.parent?.snapshot.paramMap.get('id') ?? this.route.snapshot.paramMap.get('id');\n      this.errorMsg = null;\n      this.form = this.fb.nonNullable.group({\n        title: ['', Validators.required],\n        description: [''],\n        dueDate: [''],\n        assignedTo: ['']\n      });\n    }\n    submit() {\n      if (this.form.invalid) return;\n      if (!this.studentId) {\n        this.errorMsg = 'Missing student id in route.';\n        return;\n      }\n      const raw = this.form.getRawValue();\n      const payload = {\n        studentId: this.studentId,\n        title: raw.title,\n        description: raw.description || '',\n        // Normalize empty date to undefined so backend binder doesn't try to parse empty string\n        dueDate: raw.dueDate ? raw.dueDate : undefined,\n        assignedTo: raw.assignedTo || undefined\n      };\n      this.api.createAssignment(payload).subscribe({\n        next: () => this.router.navigate(['/students', this.studentId, 'assignments']),\n        error: err => {\n          const detail = err?.error?.title || err?.message || '';\n          this.errorMsg = 'Failed to create assignment.' + (detail ? ' ' + detail : '');\n        }\n      });\n    }\n    cancel() {\n      if (this.studentId) {\n        this.router.navigate(['/students', this.studentId, 'assignments']);\n      } else {\n        this.router.navigate(['/assignments']);\n      }\n    }\n    static {\n      this.ɵfac = function AssignmentNewPageComponent_Factory(t) {\n        return new (t || AssignmentNewPageComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AssignmentNewPageComponent,\n        selectors: [[\"app-assignment-new-page\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 22,\n        vars: 3,\n        consts: [[1, \"card\"], [1, \"form-grid\", 3, \"ngSubmit\", \"formGroup\"], [\"formControlName\", \"title\", \"required\", \"\"], [1, \"span-2\"], [\"formControlName\", \"description\"], [\"type\", \"date\", \"formControlName\", \"dueDate\"], [\"formControlName\", \"assignedTo\"], [2, \"display\", \"flex\", \"gap\", \".5rem\"], [\"type\", \"submit\", 1, \"btn\", \"primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", 3, \"click\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n        template: function AssignmentNewPageComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n            i0.ɵɵtext(2, \"New Assignment\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function AssignmentNewPageComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.submit();\n            });\n            i0.ɵɵelementStart(4, \"label\");\n            i0.ɵɵtext(5, \"Title\");\n            i0.ɵɵelement(6, \"input\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"label\", 3);\n            i0.ɵɵtext(8, \"Description\");\n            i0.ɵɵelement(9, \"textarea\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"label\");\n            i0.ɵɵtext(11, \"Due Date\");\n            i0.ɵɵelement(12, \"input\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"label\");\n            i0.ɵɵtext(14, \"Assigned To\");\n            i0.ɵɵelement(15, \"input\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(16, \"div\", 7)(17, \"button\", 8);\n            i0.ɵɵtext(18, \"Create\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(19, \"button\", 9);\n            i0.ɵɵlistener(\"click\", function AssignmentNewPageComponent_Template_button_click_19_listener() {\n              return ctx.cancel();\n            });\n            i0.ɵɵtext(20, \"Cancel\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(21, AssignmentNewPageComponent_p_21_Template, 2, 1, \"p\", 10);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(14);\n            i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.errorMsg);\n          }\n        },\n        dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, NgIf],\n        encapsulation: 2\n      });\n    }\n  }\n  return AssignmentNewPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}