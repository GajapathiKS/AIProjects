{"ast":null,"code":"import { NgIf } from '@angular/common';\nimport { inject } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction LoginPageComponent_p_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nexport let LoginPageComponent = /*#__PURE__*/(() => {\n  class LoginPageComponent {\n    constructor() {\n      this.fb = inject(FormBuilder);\n      this.auth = inject(AuthService);\n      this.router = inject(Router);\n      this.loading = false;\n      this.error = '';\n      this.form = this.fb.nonNullable.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n    }\n    submit() {\n      if (this.form.invalid) return;\n      this.loading = true;\n      this.error = '';\n      this.auth.login(this.form.getRawValue()).subscribe({\n        next: () => {\n          this.loading = false;\n          this.router.navigateByUrl('/');\n        },\n        error: () => {\n          this.loading = false;\n          this.error = 'Invalid credentials';\n        }\n      });\n    }\n    static {\n      this.ɵfac = function LoginPageComponent_Factory(t) {\n        return new (t || LoginPageComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginPageComponent,\n        selectors: [[\"app-login-page\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 13,\n        vars: 3,\n        consts: [[1, \"card\", \"auth\"], [3, \"ngSubmit\", \"formGroup\"], [\"formControlName\", \"username\"], [\"type\", \"password\", \"formControlName\", \"password\"], [\"type\", \"submit\", 3, \"disabled\"], [\"class\", \"error\", 4, \"ngIf\"], [1, \"error\"]],\n        template: function LoginPageComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n            i0.ɵɵtext(2, \"Staff Login\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginPageComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.submit();\n            });\n            i0.ɵɵelementStart(4, \"label\");\n            i0.ɵɵtext(5, \"Username\");\n            i0.ɵɵelement(6, \"input\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"label\");\n            i0.ɵɵtext(8, \"Password\");\n            i0.ɵɵelement(9, \"input\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"button\", 4);\n            i0.ɵɵtext(11, \"Sign In\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(12, LoginPageComponent_p_12_Template, 2, 1, \"p\", 5);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"disabled\", ctx.form.invalid || ctx.loading);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, NgIf],\n        styles: [\".auth[_ngcontent-%COMP%]{max-width:320px}form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:1rem}label[_ngcontent-%COMP%]{display:flex;flex-direction:column}input[_ngcontent-%COMP%]{padding:.5rem;border:1px solid #b5c7e7;border-radius:4px}.error[_ngcontent-%COMP%]{color:#b30000}\"]\n      });\n    }\n  }\n  return LoginPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}