metadata:
  title: Goal creation flow (MCP)
  description: |
    Login, seed a student, navigate to Goals, create a new goal, and verify it appears in the list.
  tags:
    - e2e
    - goals
config:
  browser: chromium
  headless: true
  baseUrl: "{{environment.baseUrl}}"
steps:
  - navigate: "{{config.baseUrl}}/login"
  - fill:
      selector: 'input[formcontrolname="username"]'
      value: '{{secrets.username}}'
  - fill:
      selector: 'input[formcontrolname="password"]'
      value: '{{secrets.password}}'
  - click:
      selector: 'button[type="submit"]'
  - waitFor:
      selector: 'h1'
      text: 'Texas TEKS Program Manager'
  - evaluate:
      script: |
        (async () => {
          async function getToken() {
            const base = 'https://localhost:7140';
            const creds = [
              { username: 'admin', password: 'ChangeMe123!' },
              { username: 'admin', password: 'ChangeMe123!' }
            ];
            for (const c of creds) {
              const r = await fetch(base + '/api/auth/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(c) });
              if (r.ok) { const j = await r.json(); return j.token || j.accessToken; }
            }
            throw new Error('Failed to obtain auth token');
          }
          const token = await getToken();
          const stamp = Date.now();
          window.__goalStamp = stamp;
          const payload = {
            firstName: `mcp_${stamp}_First`,
            lastName: `mcp_${stamp}_Last`,
            dateOfBirth: '2012-01-15',
            gradeLevel: '5',
            campus: `mcp_${stamp}_Campus`,
            guardianContact: `mcp_${stamp}_Guardian`,
            programFocus: `mcp_${stamp}_Focus`,
            localId: `mcp_${stamp}`,
            enrollmentDate: '2024-09-01',
            nextReviewDate: null
          };
          const res = await fetch('https://localhost:7140/api/students', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token }, body: JSON.stringify(payload) });
          if (!res.ok) throw new Error('Failed to seed student');
          const data = await res.json();
          const id = String(data.id ?? data);
          window.location.href = `${window.location.origin}/students/${id}/goals`;
          return true;
        })()
  - waitFor:
      selector: 'h2'
      text: 'Goals'
  - clickText:
      selector: 'a.btn.primary, button.btn.primary'
      text: '+ New Goal'
  - waitFor:
      selector: 'h2'
      text: 'New Goal'
  - evaluate:
      script: |
        () => {
          const stamp = String(window.__goalStamp || Date.now());
          function byLabel(txt) {
            const labels = Array.from(document.querySelectorAll('label'));
            const label = labels.find(l => (l.textContent || '').trim().toLowerCase() === txt.toLowerCase());
            if (!label) throw new Error('Label not found: ' + txt);
            const forId = label.getAttribute('for');
            let input = null;
            if (forId) input = document.getElementById(forId);
            if (!input) input = label.querySelector('input, textarea');
            if (!input) input = label.parentElement?.querySelector('input, textarea');
            if (!input) throw new Error('Input not found for label: ' + txt);
            return input;
          }
          byLabel('Description').value = 'pw_goal_desc_' + stamp;
          byLabel('Category').value = 'pw_category';
          byLabel('Measurement').value = 'pw_measure';
          byLabel('Owner').value = 'pw_owner';
          byLabel('Target Date').value = '2025-12-31';
          const createBtn = Array.from(document.querySelectorAll('button')).find(b => (b.textContent||'').trim() === 'Create');
          if (!createBtn) throw new Error('Create button not found');
          createBtn.click();
          return true;
        }
  - waitFor:
      selector: 'h2'
      text: 'Goals'
  - evaluate:
      script: |
        () => {
          const stamp = String(window.__goalStamp);
          if (!stamp) return true; // Best effort
          const match = document.body.textContent?.includes('pw_goal_desc_' + stamp);
          if (!match) throw new Error('Created goal not found in list');
          return true;
        }
  - screenshot:
      name: 'goal-created'
      fullPage: true
